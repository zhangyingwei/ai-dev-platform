# Augment Code 开发规范

## 📋 目录索引

1. [概述与核心原则](#概述与核心原则)
2. [任务管理规范](#任务管理规范)
3. [开发规范](#开发规范)
   - [技术栈要求](#技术栈要求)
   - [Controller设计规范](#controller设计规范)
   - [数据库规范](#数据库规范)
4. [代码质量与安全规范](#代码质量与安全规范)
   - [开发原则](#开发原则)
   - [代码风格](#代码风格)
   - [安全要求](#安全要求)
5. [Git与记录管理](#git与记录管理)
   - [Git提交规范](#git提交规范)
   - [对话记录管理](#对话记录管理)
6. [质量保证体系](#质量保证体系)
   - [执行检查清单](#执行检查清单)
   - [异常处理流程](#异常处理流程)

---

## 概述与核心原则

本文档为 Augment Code AI 助手的官方开发规范，定义了使用 AI 助手进行项目开发时的**强制性要求**，确保开发过程可追溯、可审计、可回滚。

### 🎯 核心目标
- **提升代码质量**: 通过规范化流程确保代码简洁易懂
- **保证过程可控**: 通过任务拆分和状态跟踪确保执行有序
- **实现完整记录**: 通过对话记录和Git提交实现全程可追溯
- **支持快速回滚**: 通过标准化流程支持问题快速定位和修复


### 💡 执行原则
> **重要提示**: 以下原则为强制执行规则，任何违反都需要立即纠正

1. **任务驱动**: 每次交互必须进行任务拆分，严格按序执行
2. **规范优先**: 严格遵循技术栈和开发规范
3. **记录完整**: 保持完整的对话记录和Git提交历史
4. **质量保证**: 通过检查清单确保代码质量和规范遵循

---

## 任务管理规范

### 强制任务拆分机制

#### 1. 拆分要求
- **触发条件**: 每次交互开始时必须进行任务拆分
- **拆分粒度**: 复杂任务必须拆分为 1-3 个明确的子任务
- **时间估算**: 每个子任务预计执行时间约 5-10 分钟
- **执行约束**: 严格按照拆分的任务列表顺序执行，不得跳跃或遗漏

#### 2. 任务状态跟踪
实时更新任务执行状态，确保每个子任务都有明确的完成标记：

| 状态标记 | 含义 | 使用场景 |
|---------|------|----------|
| `[ ]` | 未开始 | 任务创建时的初始状态 |
| `[/]` | 进行中 | 任务正在执行过程中 |
| `[x]` | 已完成 | 任务成功完成并验证 |
| `[-]` | 已取消 | 任务因故取消执行 |
| `[!]` | 执行异常 | 任务执行过程中出现问题 |

#### 3. 执行验证要求
- **完成确认**: 每个子任务完成后必须进行验证
- **状态更新**: 及时更新任务状态标记
- **异常处理**: 遇到执行异常时，记录问题并调整后续任务
- **遗漏检查**: 如发现任务遗漏，立即停止当前执行，返回按计划执行

---

## 开发规范

---

## 代码质量与安全规范

### 开发原则

#### 核心设计原则
- **SOLID原则**: 严格遵循单一职责、开闭、里氏替换、接口隔离、依赖倒置原则
- **DRY原则**: 避免重复代码，提取公共逻辑
- **KISS原则**: 保持代码简单易懂，避免过度设计
- **YAGNI原则**: 不实现当前不需要的功能

#### 架构设计要求
- **分层架构**: 采用Controller-Service-DAO分层架构设计
- **职责分离**: 确保各层职责清晰，避免跨层调用
- **单元测试**: 代码变更需通过单元测试覆盖，测试覆盖率不低于80%

```java
// Controller层：处理HTTP请求
@RestController
public class UserController {
    @Autowired
    private UserService userService;
    
    @PostMapping("/users")
    public String createUser(@Valid @RequestBody UserDTO userDTO) {
        User user = userService.createUser(userDTO);
        return JsonBean.success(user);
    }
}

// Service层：业务逻辑处理
@Service
public class UserServiceImpl implements UserService {
    @Autowired
    private UserMapper userMapper;
    
    @Transactional
    public User createUser(UserDTO userDTO) {
        User user = convertToEntity(userDTO);
        userMapper.insert(user);
        return user;
    }
}

// DAO层：数据访问
@Mapper
public interface UserMapper {
    void insert(User user);
    User selectById(String userId);
}
```

### 代码风格

#### 命名规范
- **类名**: 使用 `UpperCamelCase` 格式（如 `UserServiceImpl`）
- **方法和变量名**: 使用 `lowerCamelCase` 格式（如 `saveUser`）
- **常量**: 使用 `UPPER_SNAKE_CASE` 格式（如 `MAX_LOGIN_ATTEMPTS`）
- **包名**: 使用小写字母，多个单词用点分隔

```java
// 类名
public class UserServiceImpl implements UserService { }

// 方法名
public User saveUser(User user) { }

// 变量名
private String userName;
private int maxRetryCount;

// 常量
public static final int MAX_LOGIN_ATTEMPTS = 3;
public static final String DEFAULT_ENCODING = "UTF-8";

// 包名
package com.huabo.user.service.impl;
```

#### 注释规范
- **方法注释**: 所有public方法必须添加Javadoc格式注释
- **类注释**: 类级别注释说明类的职责和用途
- **TODO标记**: 计划待完成的任务需要添加 `// TODO` 标记
- **FIXME标记**: 存在潜在缺陷的逻辑需要添加 `// FIXME` 标记

```java
/**
 * 用户服务实现类
 * 负责处理用户相关的业务逻辑
 * 
 * @author 开发者姓名
 * @since 2025-01-21
 */
@Service
public class UserServiceImpl implements UserService {
    
    /**
     * 保存用户信息
     * 
     * @param user 用户对象
     * @return 保存后的用户对象
     * @throws BusinessException 当用户名已存在时抛出
     */
    public User saveUser(User user) throws BusinessException {
        // TODO: 添加用户名重复检查
        // FIXME: 需要优化密码加密算法
        return userMapper.insert(user);
    }
}
```

### 安全要求

#### 常见安全漏洞防护
- **SQL注入防护**: 使用参数化查询，禁止字符串拼接SQL
- **XSS防护**: 对用户输入进行转义和过滤
- **CSRF防护**: 实施跨站请求伪造防护机制
- **权限控制**: 实现细粒度的权限验证和访问控制

```java
// ✅ 正确：使用参数化查询
@Select("SELECT * FROM TBL_USER WHERE USER_ID = #{userId}")
User findById(@Param("userId") String userId);

// ❌ 错误：字符串拼接
@Select("SELECT * FROM TBL_USER WHERE USER_ID = '" + userId + "'")
User findByIdUnsafe(String userId);
```

#### 数据安全规范
- **敏感信息加密**: 密码、密钥等敏感信息必须加密存储
- **传输安全**: 使用HTTPS协议进行数据传输
- **日志安全**: 避免在日志中记录敏感信息

---

## Git与记录管理

### Git提交规范

#### 提交时机
- **强制要求**: 每次编码工作完成后，必须创建 Git 提交记录
- **提交粒度**: 每个提交应包含一个完整的功能模块或独立可验证的子任务
- **提交频率**: 保持"小步提交、可回滚"原则

#### 提交信息格式
遵循 Conventional Commits 规范：

```
<type>(<scope>): <description> (#<task_id>)

[optional body]

[optional footer]
```

##### 类型说明
| 类型 | 描述 | 使用场景 |
|------|------|----------|
| `feat` | 新功能 | 添加新的功能特性 |
| `fix` | Bug 修复 | 修复已知问题 |
| `docs` | 文档更新 | 更新文档内容 |
| `style` | 代码格式调整 | 代码风格、格式调整 |
| `refactor` | 代码重构 | 重构现有代码 |
| `test` | 测试相关 | 添加或修改测试 |
| `chore` | 构建过程或辅助工具的变动 | 构建配置、依赖更新等 |

##### 提交示例
```bash
feat(user): 新增用户导出功能 (#TASK-20250115-001)

- 添加导出接口
- 实现 Excel 格式导出
- 添加权限验证

Closes #123
```

### 对话记录管理

#### 记录要求
必须保存完整的 AI Agent 交互对话记录，包括：
- 用户输入
- Agent 输出
- 重要工具调用
- 关键信息检索过程

#### 存储规范
- **强制路径**: 项目根目录的 `.chat` 目录
- **文件命名**: `chat-{YYYYMMDD-HHmmss}-{task_id}.jsonl`
- **文件格式**: JSON Lines（.jsonl）或 Markdown（.md）

#### 基本字段结构
```json
{
  "timestamp": "时间戳",
  "role": "角色（user/agent/tool）",
  "content": "内容",
  "task_id": "任务ID",
  "commit_id": "提交ID（如有）",
  "attachments": "附件（可选）"
}
```

#### 版本控制要求
- 所有对话记录文件应纳入 Git 版本管理
- 涉及敏感信息的内容需脱敏处理
- 不允许覆盖已有记录，只允许追加新文件
- 如需修订，使用"修订说明"追加一条记录

---

## 质量保证体系

### 执行检查清单

#### 任务管理检查
- [ ] 是否完成任务拆分？
- [ ] 是否按顺序执行？
- [ ] 是否有遗漏任务？
- [ ] 是否更新任务状态？
- [ ] 是否完成验证？

#### Git 提交检查
- [ ] 是否在功能完成后创建提交？
- [ ] 提交信息是否遵循 Conventional Commits 规范？
- [ ] 提交粒度是否合理？
- [ ] 是否包含任务ID？

#### 对话记录检查
- [ ] 是否保存完整的对话记录？
- [ ] 文件命名是否符合规范？
- [ ] 是否存储在正确的目录？
- [ ] 是否纳入版本控制？

#### 代码质量检查
- [ ] 是否遵循Controller设计规范？
- [ ] 是否实施了安全性开发要求？
- [ ] 是否符合代码风格规范？
- [ ] 是否考虑了扩展性设计？
- [ ] 是否添加了适当的注释和文档？



### 异常处理流程

#### 任务执行异常
1. **发现遗漏** → 立即停止当前执行
2. **重新检查** → 标记遗漏任务
3. **返回执行** → 按原计划继续
4. **记录原因** → 优化后续执行

#### 规则违反处理
1. **Git 提交缺失**: 立即创建补充提交，记录遗漏原因
2. **对话记录缺失**: 补充记录当前会话，标注补充说明
3. **任务状态不一致**: 重新核对任务列表，更正状态标记
4. **质量检查失败**: 重新执行相关任务，确保符合标准

### 审计与回滚

#### 审计要求
- 所有开发活动必须有完整记录
- Git 提交历史清晰可追溯
- 对话记录完整保存
- 任务执行状态准确记录

#### 回滚机制
- **代码回滚**: 基于 Git 提交的代码回滚
- **决策回溯**: 基于对话记录的决策回溯
- **进度恢复**: 基于任务状态的进度恢复

---

## 实施指南

### 开发者职责
1. **规范遵循**: 严格遵循所有规范要求
2. **及时提交**: 及时创建 Git 提交
3. **记录维护**: 维护完整的对话记录
4. **任务管理**: 按任务拆分执行开发


### Agent 职责
1. **任务拆分**: 严格执行任务拆分
2. **记录管理**: 自动记录对话过程
3. **强制执行**: 在每次对话结束前，必须主动执行以下操作：
   - 创建 `.chat` 目录（如不存在）
   - 保存完整对话记录到 `.chat/chat-{YYYYMMDD-HHmmss}-{task_id}.jsonl`
   - 执行 `git add .` 和 `git commit` 命令，提交所有更改
4. **可追溯性**: 确保所有操作可追溯
5. **工具集成**: 集成开发助手工具

### 常见问题处理

#### Q: 如何处理任务拆分过细的情况？
A: 合并相关的小任务，确保每个任务有独立的价值和验收标准。

#### Q: 对话记录文件过大怎么办？
A: 按日期或任务ID分目录存储，单个文件建议不超过10MB。

#### Q: Git提交信息写错了怎么办？
A: 使用 `git commit --amend` 修改最近一次提交，或创建新的修正提交。



---

**Always respond in 简体中文**

*Augment Code 开发规范*
*版本: v4.0*
*最后更新: 2025-01-21*
*文档状态: 已全面重构优化*
